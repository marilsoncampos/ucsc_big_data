Hive Lab 01.1
=============

In this exercise you will be working with the movie lens dataset. 

-----------------------------------------------------------------------------------------------------
Step 1. Create the following directory in HDFS.
-----------------------------------------------------------------------------------------------------

s3a://hdfs-files-2020-01/<user>/data/movies_data/links
s3a://hdfs-files-2020-01/<user>/data/movies_data/movies
s3a://hdfs-files-2020-01/<user>/data/movies_data/ratings
s3a://hdfs-files-2020-01/<user>/data/movies_data/tags

-- solution-begin --

hdfs dfs -mkdir -p s3a://hdfs-files-2020-01/t1/data/movies_data/links
hdfs dfs -mkdir -p s3a://hdfs-files-2020-01/t1/data/movies_data/movies
hdfs dfs -mkdir -p s3a://hdfs-files-2020-01/t1/data/movies_data/ratings
hdfs dfs -mkdir -p s3a://hdfs-files-2020-01/t1/data/movies_data/tags

or 

hdfs dfs -mkdir -p s3a://hdfs-files-2020-01/t2/data/movies_data/{links,movies,ratings,tags}

Where user is your 'student name'

-- solution-end --


-----------------------------------------------------------------------------------------------------
Step 2. Load data from the local host into HDFS location s3a://hdfs-files-2020-01/<user>/movies_data.
-----------------------------------------------------------------------------------------------------


There is a directory “/srv/hadoop/data/data_movies” containing the files to be loaded.

cd into that directory and type the command below to confirm the file format:

> head movies.csv


-- solution-begin --

cd /srv/hadoop/data/data_movies
hdfs dfs -put links.csv s3a://hdfs-files-2020-01/<user>/data/movies_data/links
hdfs dfs -put movies.csv s3a://hdfs-files-2020-01/<user>/data/movies_data/movies
hdfs dfs -put ratings.csv s3a://hdfs-files-2020-01/<user>/data/movies_data/ratings
hdfs dfs -put tags.csv s3a://hdfs-files-2020-01/<user>/data/movies_data/tags

hdfs dfs -ls s3a://hdfs-files-2020-01/<user>/data/movies_data/*/*

-- solution-end --


-----------------------------------------------------------------------------------------------------
Step 3. Create external table to match the HDFS files for movies.
-----------------------------------------------------------------------------------------------------

Create a create table statement and paste into the hive cmd line.

-- solution-begin --
   
CREATE EXTERNAL TABLE <user>.movies (
   movie_id INT,
   title STRING,
   genres ARRAY<STRING>)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ':'
   COLLECTION ITEMS TERMINATED BY '|'
   LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION "s3a://hdfs-files-2020-01/<user>/data/movies_data/movies"; 

-- solution-end --

 
-----------------------------------------------------------------------------------------------------
Step 4. Test the table using queries like below
-----------------------------------------------------------------------------------------------------

select * from <user>.movies limit 20; 

Solution: N/A



-----------------------------------------------------------------------------------------------------
Step 5. Perform the load to the other tables.
-----------------------------------------------------------------------------------------------------

Notice that the Ratings file contains the following fields:
userId, movieId, rating, timestamp

-- solution-begin --

CREATE EXTERNAL TABLE <user>.ratings (
   userId INT,
   movie_id INT,
   rating double,
   ts_data string)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ','
   LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION "s3a://hdfs-files-2020-01/<user>/data/movies_data/ratings"; 

CREATE EXTERNAL TABLE <user>.tags (
  user_id INT,
  movie_id INT,
  tag STRING,
  ts_data STRING)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ','
   LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION "s3a://hdfs-files-2020-01/<user>/data/movies_data/tags"; 

CREATE EXTERNAL TABLE <user>.links (
  imdb_id STRING,
  tag STRING,
  tmdb_id STRING)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ','
   LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION "s3a://hdfs-files-2020-01/<user>/data/movies_data/links"; 


-- solution-end --

-----------------------------------------------------------------------------------------------------
Step 6. Count the number of movies in the "movies" table.
-----------------------------------------------------------------------------------------------------

Create a program called 'query_hadoop.sh' with the following contents.
#!/bin/bash

hive <<EOF | egrep -v "^....>" > /tmp/num_movies.txt
SELECT count(*) FROM <user>.MOVIES
;
EOF

echo -n "Total movies: "
cat /tmp/num_movies.txt

# -- file ends here ---


After issue these commands to allow execution and execute the program.

chmod a+x query_hadoop.sh
./query_hadoop.sh


Solution: N/A

---------------------------------------------------------------------------------------------------------
Step 7. List the "movies_ids", total ratings and average rating for the 10 most rated movies.
---------------------------------------------------------------------------------------------------------

-- solution-begin --

#!/bin/bash

SAVED_FILE=/tmp/<user>_results.txt
hive <<EOF | egrep -v "^....>"  > ${SAVED_FILE}

SELECT 
  movie_id, 
  count(*) as number_of_ratings,
  round(avg(rating), 4) as avg_rating
FROM <user>.ratings
WHERE movie_id is not null
GROUP BY movie_id
ORDER BY number_of_ratings DESC
LIMIT 10
;

EOF

echo "Ratings for the top 10 most rated movies: "
echo "Id      Ratings Avg Rating"
cat ${SAVED_FILE}

-- solution-end --


-----------------------------------------------------------------------------------------------------
Step 8. List the "movie titles", number of ratings and their average rating for 
the most frequently rated movies.
-----------------------------------------------------------------------------------------------------

-- solution-begin --

#!/bin/bash

SAVED_FILE=/tmp/<user>_results.txt
hive <<EOF | egrep -v "^....>"  >  ${SAVED_FILE}

WITH titles_and_ratings AS (
    SELECT 
      m.title AS title, 
      m.movie_id,
      r.rating AS rating
    FROM <user>.movies m
    INNER JOIN <user>.ratings r
    ON m.movie_id = r.movie_id
),
moview_and_stats AS (
  SELECT 
    q1.movie_id,
    max(q1.title) as title,
    count(*) as number_of_ratings,
    round(avg(rating),4) AS avg_rating 
  FROM titles_and_ratings
  GROUP BY q1.movie_id 
)

SELECT
  title,
  number_of_ratings,
  avg_rating
FROM moview_and_stats
ORDER BY number_of_ratings DESC
LIMIT 20
;

EOF

echo "Top 20 most rated movies titles."
echo "Id      Ratings Avg Rating"
echo ""
cat ${SAVED_FILE}
EOF


Optimized solution:
-------------------

#!/bin/bash

SAVED_FILE=/tmp/<user>_results.txt
hive <<EOF | egrep -v "^....>" >  ${SAVED_FILE}

SELECT q1.* FROM (
  SELECT
    m.title AS title,
    r.number_of_ratings,
    r.avg_rating
  FROM (
      SELECT
        movie_id,
        count(*) as number_of_ratings,
        round(avg(rating),4) AS avg_rating
      FROM <user>.ratings
      GROUP BY movie_id
      ORDER BY number_of_ratings DESC
      LIMIT 20
  ) r
  INNER JOIN <user>.movies m
  ON m.movie_id = r.movie_id
) q1
;

EOF


echo "Top 20 most rated movies titles."
echo "Id      Ratings Avg Rating"
echo ""
cat  ${SAVED_FILE}

-- solution-end --


-----------------------------------------------------------------------------------------------------
Step 9. Calculate the top 10 years that had most "Comedy" movies. List the year 
and the number of comedy movies on that year.
-----------------------------------------------------------------------------------------------------

Hint: Use the following query to extract the year from the 
Title in the movie table.

select  
  regexp_extract(title, '(.*)\\((.*)\\)', 1) as movie_name,
  regexp_extract(title, '(.*)\\((.*)\\)', 2) as year
from 
  movies 
where array_contains(genres, 'Comedy') limit 10;


-- solution-begin --

Noticed that when you put the regex into a HERE file you need to add another set of slashes.

#!/bin/bash
SAVED_FILE=/tmp/<user>_sol_19.txt

hive <<EOF | egrep -v "^....>" >  ${SAVED_FILE}

SELECT 
  year,
  counted 
FROM (
  SELECT
     year, 
     count(*) AS counted
  FROM (
    SELECT  
      regexp_extract(title, '(.*)\\\\((.*)\\\\)', 2) as year
    FROM <user>.movies 
    WHERE 
       array_contains(genres, 'Comedy')
  ) q1
  GROUP BY q1.year
) q2
ORDER BY counted DESC
LIMIT 10
;

EOF

echo "Best years for Comedy movies"
cat  ${SAVED_FILE}

-- solution-end --

 
-----------------------------------------------------------------------------------------------------
Step 10.  List the number of distinct tags on the tags table.
-----------------------------------------------------------------------------------------------------

provide the hive sql 

-- solution-begin --

  SELECT count(DISTINCT tag) FROM <user>.tags;

-- solution-end --

-----------------------------------------------------------------------------------------------------
Step 11. Find the most 10 common tags used.
-----------------------------------------------------------------------------------------------------

Provide the hive sql to solve the problem

-- solution-begin --

   SELECT 
     tag, counted
   FROM (
     SELECT 
       tag, 
       count(*) AS counted
     FROM <user>.tags
     GROUP BY tag
   ) q1
   ORDER BY counted DESC
   LIMIT 10
   ;

-- solution-end --


-----------------------------------------------------------------------------------------------------
Step 12. Find total average rating across all movies.
-----------------------------------------------------------------------------------------------------

Provide the hive sql to solve the problem

-- solution-begin --

SELECT 
  avg(rating) as avg_rating
FROM <user>.ratings;

-- solution-end --




                                         - x - x - x - x -
